# This is a basic workflow to help you get started with Actions

name: CI
permissions:
  id-token: write # required to use OIDC authentication
  contents: write # required to checkout the code from the repo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: Directory Permissions
        run: chmod -R 777 ./    
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::648932717413:role/aws-ecr-ecs-access
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          role-session-name: GitHubActions
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reponame
          IMAGE_TAG: latest
        run: |
          docker-compose build
          docker tag docker-laravel-app:latest $ECR_REGISTRY/docker-laravel-app:$IMAGE_TAG
          docker push $ECR_REGISTRY/docker-laravel-app:$IMAGE_TAG
          echo "::set-output name=appimage::$ECR_REGISTRY/docker-laravel-app:$IMAGE_TAG"
          docker tag mysql:latest $ECR_REGISTRY/mysql:$IMAGE_TAG
          docker tag nginx:latest $ECR_REGISTRY/nginx:$IMAGE_TAG
          docker tag phpmyadmin/phpmyadmin:latest $ECR_REGISTRY/phpmyadmin/phpmyadmin:$IMAGE_TAG
          docker push $ECR_REGISTRY/docker-laravel-app:$IMAGE_TAG
          docker push $ECR_REGISTRY/mysql:$IMAGE_TAG
          docker push $ECR_REGISTRY/nginx:$IMAGE_TAG
          docker push $ECR_REGISTRY/phpmyadmin/phpmyadmin:$IMAGE_TAG
          echo "setting output values"
          echo "::set-output name=appimage::$ECR_REGISTRY/docker-laravel-app:$IMAGE_TAG"
          echo "::set-output name=mysqlimage::$ECR_REGISTRY/mysql:$IMAGE_TAG"
          echo "::set-output name=phpmyadminimage::$ECR_REGISTRY/phpmyadmin/phpmyadmin:$IMAGE_TAG"
          echo "::set-output name=webimage::$ECR_REGISTRY/nginx:$IMAGE_TAG"

      # Runs a single command using the runners shell
      - name: Print the image name
        run: |
          echo the images are
          echo ${{ steps.build-image.outputs.appimage }}
          echo ${{ steps.build-image.outputs.webimage }}
          echo ${{ steps.build-image.outputs.mysqlimage }}
          echo ${{ steps.build-image.outputs.phpmyadminimage }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition testecstask \
          --query taskDefinition > task-definition.json    

      - name: Fill in the new app image ID in the Amazon ECS task definition
        id: app-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: docker-laravel-app
          image: ${{ steps.build-image.outputs.appimage }}

      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: web-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.app-task-def.outputs.task-definition }}
          container-name: nginx
          image: ${{ steps.build-image.outputs.webimage }} 

      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: web-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.app-task-def.outputs.task-definition }}
          container-name: mysql
          image: ${{ steps.build-image.outputs.mysqlimage }} 

      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: web-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.app-task-def.outputs.task-definition }}
          container-name: phpmyadmin
          image: ${{ steps.build-image.outputs.phpmyadminimage }} 

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.web-task-def.outputs.task-definition }}
          service: testserviceelb
          cluster: DevCluster
          wait-for-service-stability: true